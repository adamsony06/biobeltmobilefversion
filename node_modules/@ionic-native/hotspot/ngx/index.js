import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Hotspot = /** @class */ (function (_super) {
    __extends(Hotspot, _super);
    function Hotspot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hotspot.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    Hotspot.prototype.toggleWifi = function () { return cordova(this, "toggleWifi", {}, arguments); };
    Hotspot.prototype.createHotspot = function (ssid, mode, password) { return cordova(this, "createHotspot", {}, arguments); };
    Hotspot.prototype.startHotspot = function () { return cordova(this, "startHotspot", {}, arguments); };
    Hotspot.prototype.configureHotspot = function (ssid, mode, password) { return cordova(this, "configureHotspot", {}, arguments); };
    Hotspot.prototype.stopHotspot = function () { return cordova(this, "stopHotspot", {}, arguments); };
    Hotspot.prototype.isHotspotEnabled = function () { return cordova(this, "isHotspotEnabled", {}, arguments); };
    Hotspot.prototype.getAllHotspotDevices = function () { return cordova(this, "getAllHotspotDevices", {}, arguments); };
    Hotspot.prototype.connectToWifi = function (ssid, password) { return cordova(this, "connectToWifi", {}, arguments); };
    Hotspot.prototype.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) { return cordova(this, "connectToWifiAuthEncrypt", {}, arguments); };
    Hotspot.prototype.addWifiNetwork = function (ssid, mode, password) { return cordova(this, "addWifiNetwork", {}, arguments); };
    Hotspot.prototype.removeWifiNetwork = function (ssid) { return cordova(this, "removeWifiNetwork", {}, arguments); };
    Hotspot.prototype.isConnectedToInternet = function () { return cordova(this, "isConnectedToInternet", {}, arguments); };
    Hotspot.prototype.isConnectedToInternetViaWifi = function () { return cordova(this, "isConnectedToInternetViaWifi", {}, arguments); };
    Hotspot.prototype.isWifiOn = function () { return cordova(this, "isWifiOn", {}, arguments); };
    Hotspot.prototype.isWifiSupported = function () { return cordova(this, "isWifiSupported", {}, arguments); };
    Hotspot.prototype.isWifiDirectSupported = function () { return cordova(this, "isWifiDirectSupported", {}, arguments); };
    Hotspot.prototype.scanWifi = function () { return cordova(this, "scanWifi", {}, arguments); };
    Hotspot.prototype.scanWifiByLevel = function () { return cordova(this, "scanWifiByLevel", {}, arguments); };
    Hotspot.prototype.startWifiPeriodicallyScan = function (interval, duration) { return cordova(this, "startWifiPeriodicallyScan", {}, arguments); };
    Hotspot.prototype.stopWifiPeriodicallyScan = function () { return cordova(this, "stopWifiPeriodicallyScan", {}, arguments); };
    Hotspot.prototype.getNetConfig = function () { return cordova(this, "getNetConfig", {}, arguments); };
    Hotspot.prototype.getConnectionInfo = function () { return cordova(this, "getConnectionInfo", {}, arguments); };
    Hotspot.prototype.pingHost = function (ip) { return cordova(this, "pingHost", {}, arguments); };
    Hotspot.prototype.getMacAddressOfHost = function (ip) { return cordova(this, "getMacAddressOfHost", {}, arguments); };
    Hotspot.prototype.isDnsLive = function (ip) { return cordova(this, "isDnsLive", {}, arguments); };
    Hotspot.prototype.isPortLive = function (ip) { return cordova(this, "isPortLive", {}, arguments); };
    Hotspot.prototype.isRooted = function () { return cordova(this, "isRooted", {}, arguments); };
    Hotspot.pluginName = "Hotspot";
    Hotspot.plugin = "cordova-plugin-hotspot";
    Hotspot.pluginRef = "cordova.plugins.hotspot";
    Hotspot.repo = "https://github.com/hypery2k/cordova-hotspot-plugin";
    Hotspot.platforms = ["Android"];
    Hotspot.decorators = [
        { type: Injectable }
    ];
    return Hotspot;
}(IonicNativePlugin));
export { Hotspot };
//# sourceMappingURL=data:application/json;base64,