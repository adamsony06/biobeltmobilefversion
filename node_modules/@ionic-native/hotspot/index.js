var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HotspotOriginal = /** @class */ (function (_super) {
    __extends(HotspotOriginal, _super);
    function HotspotOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HotspotOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    HotspotOriginal.prototype.toggleWifi = function () { return cordova(this, "toggleWifi", {}, arguments); };
    HotspotOriginal.prototype.createHotspot = function (ssid, mode, password) { return cordova(this, "createHotspot", {}, arguments); };
    HotspotOriginal.prototype.startHotspot = function () { return cordova(this, "startHotspot", {}, arguments); };
    HotspotOriginal.prototype.configureHotspot = function (ssid, mode, password) { return cordova(this, "configureHotspot", {}, arguments); };
    HotspotOriginal.prototype.stopHotspot = function () { return cordova(this, "stopHotspot", {}, arguments); };
    HotspotOriginal.prototype.isHotspotEnabled = function () { return cordova(this, "isHotspotEnabled", {}, arguments); };
    HotspotOriginal.prototype.getAllHotspotDevices = function () { return cordova(this, "getAllHotspotDevices", {}, arguments); };
    HotspotOriginal.prototype.connectToWifi = function (ssid, password) { return cordova(this, "connectToWifi", {}, arguments); };
    HotspotOriginal.prototype.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) { return cordova(this, "connectToWifiAuthEncrypt", {}, arguments); };
    HotspotOriginal.prototype.addWifiNetwork = function (ssid, mode, password) { return cordova(this, "addWifiNetwork", {}, arguments); };
    HotspotOriginal.prototype.removeWifiNetwork = function (ssid) { return cordova(this, "removeWifiNetwork", {}, arguments); };
    HotspotOriginal.prototype.isConnectedToInternet = function () { return cordova(this, "isConnectedToInternet", {}, arguments); };
    HotspotOriginal.prototype.isConnectedToInternetViaWifi = function () { return cordova(this, "isConnectedToInternetViaWifi", {}, arguments); };
    HotspotOriginal.prototype.isWifiOn = function () { return cordova(this, "isWifiOn", {}, arguments); };
    HotspotOriginal.prototype.isWifiSupported = function () { return cordova(this, "isWifiSupported", {}, arguments); };
    HotspotOriginal.prototype.isWifiDirectSupported = function () { return cordova(this, "isWifiDirectSupported", {}, arguments); };
    HotspotOriginal.prototype.scanWifi = function () { return cordova(this, "scanWifi", {}, arguments); };
    HotspotOriginal.prototype.scanWifiByLevel = function () { return cordova(this, "scanWifiByLevel", {}, arguments); };
    HotspotOriginal.prototype.startWifiPeriodicallyScan = function (interval, duration) { return cordova(this, "startWifiPeriodicallyScan", {}, arguments); };
    HotspotOriginal.prototype.stopWifiPeriodicallyScan = function () { return cordova(this, "stopWifiPeriodicallyScan", {}, arguments); };
    HotspotOriginal.prototype.getNetConfig = function () { return cordova(this, "getNetConfig", {}, arguments); };
    HotspotOriginal.prototype.getConnectionInfo = function () { return cordova(this, "getConnectionInfo", {}, arguments); };
    HotspotOriginal.prototype.pingHost = function (ip) { return cordova(this, "pingHost", {}, arguments); };
    HotspotOriginal.prototype.getMacAddressOfHost = function (ip) { return cordova(this, "getMacAddressOfHost", {}, arguments); };
    HotspotOriginal.prototype.isDnsLive = function (ip) { return cordova(this, "isDnsLive", {}, arguments); };
    HotspotOriginal.prototype.isPortLive = function (ip) { return cordova(this, "isPortLive", {}, arguments); };
    HotspotOriginal.prototype.isRooted = function () { return cordova(this, "isRooted", {}, arguments); };
    HotspotOriginal.pluginName = "Hotspot";
    HotspotOriginal.plugin = "cordova-plugin-hotspot";
    HotspotOriginal.pluginRef = "cordova.plugins.hotspot";
    HotspotOriginal.repo = "https://github.com/hypery2k/cordova-hotspot-plugin";
    HotspotOriginal.platforms = ["Android"];
    return HotspotOriginal;
}(IonicNativePlugin));
var Hotspot = new HotspotOriginal();
export { Hotspot };
//# sourceMappingURL=data:application/json;base64,