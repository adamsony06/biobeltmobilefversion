/// <reference types="node" />
import dgram, { BindOptions, RemoteInfo, Socket, SocketOptions, SocketType } from 'dgram';
import { AddressInfo } from 'net';
export { BindOptions, RemoteInfo, Socket, SocketOptions, SocketType } from 'dgram';
export { AddressInfo } from 'net';
export interface SocketAsPromisedOptions extends SocketOptions {
    dgram?: typeof dgram;
}
export declare class SocketAsPromised {
    readonly socket: Socket;
    constructor(socket: Socket);
    bind(port?: number, address?: string): Promise<AddressInfo>;
    bind(options: BindOptions): Promise<AddressInfo>;
    addMembership(multicastAddress: string, multicastInterface?: string): void;
    close(): Promise<void>;
    send(msg: Buffer | String | any[], offset: number, length: number, port: number, address: string): Promise<number>;
    send(msg: Buffer | String | any[], port: number, address: string): Promise<number>;
    address(): AddressInfo;
    setBroadcast(flag: boolean): void;
    setTTL(ttl: number): void;
    setMulticastTTL(ttl: number): void;
    setMulticastInterface(multicastInterface: string): void;
    setMulticastLoopback(flag: boolean): void;
    dropMembership(multicastAddress: string, multicastInterface?: string): void;
    ref(): this;
    unref(): this;
    setRecvBufferSize(size: number): void;
    setSendBufferSize(size: number): void;
    getRecvBufferSize(): number;
    getSendBufferSize(): number;
}
export declare function createSocket(type: SocketType, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): SocketAsPromised;
export declare function createSocket(options: SocketAsPromisedOptions, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): SocketAsPromised;
declare const dgramAsPromised: {
    createSocket: typeof createSocket;
};
export default dgramAsPromised;
